{"version":3,"sources":["utils/apiCaller.js","constants/KeyConstants.js","actions/GamesActions.js","actions/GameActions.js","selectors/GameSelectors.js","containers/GameContainer.js"],"names":["camelize","require","instanceNext","axios","create","baseURL","API_URL","timeout","fetchApi","endpoint","a","method","body","params","sourceToken","url","data","cancelToken","interceptors","request","use","config","newUrl","PUBLIC_API_KEY","includes","replace","Promise","resolve","error","reject","response","message","GENRE_COLLECTION_TYPE","SEARCH_COLLECTION_TYPE","TAG_COLLECTION_TYPE","GAME_COLLECTION_TYPE","gamesFetchRequest","collectionKey","type","FETCH_GAMES_REQUEST","payload","gamesFetchSuccess","fetchedData","nextUrl","FETCH_GAMES_SUCCESS","fetchGames","dispatch","next","results","console","log","fetchGamesNext","gamesNextUrl","getState","state","games","getGames","collection","isFetching","isExist","loading","fetchGamesIfNeeded","isExists","hasItems","length","fetchGameScreenshotsSuccess","screenshots","FETCH_GAME_SCREENSHOTS_SUCCESS","fetchGameScreenshots","id","GAME_PATH","fetchGame","getCollectionKey","createSelector","getSlug","slug","join","getGame","key","getScreenshots","connect","game","isAuthenticated","getIsAuthenticated","likes","getLikes","fetchGameIfNeeded","playFullVideo","changeRoute","toggleLike","Game"],"mappings":"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","file":"static/js/4.d7b182cd.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { API_URL, PUBLIC_API_KEY } from '../constants/urlApi';\r\nconst camelize = require('camelize');\r\n\r\nconst instanceNext = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 10000\r\n});\r\n\r\ninstanceNext.interceptors.request.use(\r\n  config => {\r\n    let newUrl = `${config.url}&key=${PUBLIC_API_KEY}`;\r\n    if (!config.url.includes('?')) {\r\n      newUrl = newUrl.replace('&', '?');\r\n    }\r\n    config.url = newUrl;\r\n    return Promise.resolve(config);\r\n  },\r\n  error => Promise.reject(error)\r\n);\r\n\r\ninstanceNext.interceptors.response.use(\r\n  response => camelize(response.data),\r\n  error => {\r\n    if (error.response) {\r\n      return Promise.reject(error.response);\r\n    }\r\n    if (error.request) {\r\n      return Promise.reject(error.request);\r\n    }\r\n    return Promise.reject(error.message);\r\n  }\r\n);\r\n\r\nexport async function fetchApi(\r\n  endpoint,\r\n  method = 'GET',\r\n  body,\r\n  params,\r\n  sourceToken\r\n) {\r\n  return instanceNext({\r\n    method: method,\r\n    url: endpoint,\r\n    data: body,\r\n    params: params,\r\n    cancelToken: sourceToken\r\n  });\r\n}\r\n\r\nexport async function fetchAllApi(requests = []) {\r\n  return axios.all(requests);\r\n}\r\n","export const GENRE_COLLECTION_TYPE = 'GENRE_COLLECTION_TYPE';\r\nexport const SEARCH_COLLECTION_TYPE = 'GENRE_COLLECTION_TYPE';\r\nexport const TAG_COLLECTION_TYPE = 'TAG_COLLECTION_TYPE';\r\n\r\nexport const GAME_COLLECTION_TYPE = 'GAME_COLLECTION_TYPE';\r\n","import {\r\n  FETCH_GAMES_REQUEST,\r\n  FETCH_GAMES_SUCCESS\r\n} from '../constants/ActionTypes';\r\nimport { fetchApi } from '../utils/apiCaller';\r\nimport { getGames } from '../selectors/CommonSelectors';\r\n\r\nexport const gamesFetchRequest = collectionKey => ({\r\n  type: FETCH_GAMES_REQUEST,\r\n  payload: { collectionKey }\r\n});\r\n\r\nexport const gamesFetchSuccess = (collectionKey, fetchedData, nextUrl) => ({\r\n  type: FETCH_GAMES_SUCCESS,\r\n  payload: { collectionKey, fetchedData, nextUrl }\r\n});\r\n\r\nexport const fetchGames = (collectionKey, url, method) => async dispatch => {\r\n  try {\r\n    dispatch(gamesFetchRequest(collectionKey));\r\n    const data = await fetchApi(url, method);\r\n\r\n    const { next, results } = data;\r\n\r\n    dispatch(gamesFetchSuccess(collectionKey, results, next));\r\n  } catch (err) {\r\n    console.log('fetchGames error', err);\r\n  }\r\n};\r\n\r\nexport const fetchGamesNext = (collectionKey, gamesNextUrl) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const games = getGames(state);\r\n  const collection = games[collectionKey];\r\n  const isExist = !!collection;\r\n  const isFetching = isExist ? collection.loading : false;\r\n  const shouldFetch = isExist && !isFetching && gamesNextUrl;\r\n  if (shouldFetch) {\r\n    dispatch(fetchGames(collectionKey, gamesNextUrl));\r\n  }\r\n};\r\n\r\nexport const fetchGamesIfNeeded = (collectionKey, url) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const games = getGames(state);\r\n  const collection = games[collectionKey];\r\n  const isExists = !!collection;\r\n  const isFetching = isExists ? collection.loading : false;\r\n  const hasItems = isExists ? collection.games.length > 0 : false;\r\n  if (!isExists || (!hasItems && !isFetching)) {\r\n    dispatch(fetchGames(collectionKey, url));\r\n  }\r\n};\r\n","import { FETCH_GAME_SCREENSHOTS_SUCCESS } from '../constants/ActionTypes';\r\nimport { gamesFetchSuccess } from '../actions/GamesActions';\r\nimport { getGames } from '../selectors/CommonSelectors';\r\nimport { GAME_PATH } from '../constants/urlApi';\r\nimport { fetchApi } from '../utils/apiCaller';\r\n\r\nconst fetchGameScreenshotsSuccess = (collectionKey, screenshots) => ({\r\n  type: FETCH_GAME_SCREENSHOTS_SUCCESS,\r\n  payload: { collectionKey, screenshots }\r\n});\r\n\r\nconst fetchGameScreenshots = (id, collectionKey) => async dispatch => {\r\n  const url = `${GAME_PATH.replace(':slug', id)}/screenshots?page_size=20`;\r\n  const data = await fetchApi(url);\r\n  const { results } = data;\r\n  dispatch(fetchGameScreenshotsSuccess(collectionKey, results));\r\n};\r\n\r\nconst fetchGame = (collectionKey, url) => async dispatch => {\r\n  const data = await fetchApi(url);\r\n  const { id } = data;\r\n  if (id) {\r\n    dispatch(gamesFetchSuccess(collectionKey, [data], null));\r\n    dispatch(fetchGameScreenshots(id, collectionKey));\r\n  }\r\n};\r\n\r\nexport const fetchGameIfNeeded = (slug, collectionKey) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const games = getGames(state);\r\n  const collection = games[collectionKey];\r\n  const isExists = !!collection;\r\n  const hasItems = isExists ? collection.games.length > 0 : false;\r\n  if (!isExists || !hasItems) {\r\n    const url = GAME_PATH.replace(':slug', slug);\r\n    dispatch(fetchGame(collectionKey, url));\r\n  }\r\n};\r\n","import { createSelector } from 'reselect';\r\nimport { getSlug, getGames } from './CommonSelectors';\r\nimport { GAME_COLLECTION_TYPE } from '../constants/KeyConstants';\r\n\r\nexport const getCollectionKey = createSelector(getSlug, slug =>\r\n  [GAME_COLLECTION_TYPE, slug].join('|')\r\n);\r\n\r\nexport const getGame = createSelector(\r\n  getGames,\r\n  getCollectionKey,\r\n  (games, key) => {\r\n    const collection = games[key];\r\n    return collection && collection.games.length > 0\r\n      ? collection.games[0]\r\n      : null;\r\n  }\r\n);\r\n\r\nexport const getScreenshots = createSelector(\r\n  [getGames, getCollectionKey],\r\n  (games, key) => {\r\n    const collection = games[key];\r\n    return collection && collection.screenshots ? collection.screenshots : [];\r\n  }\r\n);\r\n","import { connect } from 'react-redux';\r\nimport { Game } from '../components';\r\nimport { fetchGameIfNeeded } from '../actions/GameActions';\r\nimport { playFullVideo } from '../actions/AppActions';\r\nimport { changeRoute } from '../actions/RouterActions';\r\nimport { toggleLike } from '../actions/UserActions';\r\nimport {\r\n  getGame,\r\n  getCollectionKey,\r\n  getScreenshots\r\n} from '../selectors/GameSelectors';\r\nimport {\r\n  getSlug,\r\n  getIsAuthenticated,\r\n  getLikes\r\n} from '../selectors/CommonSelectors';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    game: getGame(state),\r\n    collectionKey: getCollectionKey(state),\r\n    slug: getSlug(state),\r\n    screenshots: getScreenshots(state),\r\n    isAuthenticated: getIsAuthenticated(state),\r\n    likes: getLikes(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  fetchGameIfNeeded,\r\n  playFullVideo,\r\n  changeRoute,\r\n  toggleLike\r\n})(Game);\r\n"],"sourceRoot":""}